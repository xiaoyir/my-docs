import{_ as s,c as n,o as e,d as a}from"./app-BLFzZ_eu.js";const i={},l=a(`<h1 id="redis缓存设计规范" tabindex="-1"><a class="header-anchor" href="#redis缓存设计规范"><span>redis缓存设计规范</span></a></h1><h2 id="一、键值设计" tabindex="-1"><a class="header-anchor" href="#一、键值设计"><span>一、键值设计</span></a></h2><h3 id="_1、key名设计" tabindex="-1"><a class="header-anchor" href="#_1、key名设计"><span>1、key名设计</span></a></h3><ul><li>【建议】可读性</li></ul><p>以业务名(或数据库名)为前缀(防止key冲突)，用冒号分隔，比如业务名:表名:id的key可以设置成ugc:video:1</p><ul><li>【建议】可管理性</li></ul><p>相同业务场景使用公共前缀，同时冒号分层有助于客户端快速定位key</p><ul><li>【建议】 简洁性</li></ul><p>保证语义的前提下，控制key的长度，当key较多时，内存占用也不容忽视，</p><p>例如： user:{uid}:friends:messages:{mid}简化为u:{uid}:friⓂ️{mid}。</p><ul><li>【强制】 不要包含特殊字符</li></ul><p>不能包含空格、换行、单双引号以及其他转义字符</p><h3 id="_2、value设计" tabindex="-1"><a class="header-anchor" href="#_2、value设计"><span>2、value设计</span></a></h3><ul><li>【强制】 拒绝bigkey(防止网卡流量、慢查询)</li></ul><p>string类型控制在10KB以内，hash、list、set、zset元素个数不要超过5000。</p><p>非字符串的bigkey，不要使用del删除，使用hscan、sscan、zscan方式渐进式删除，同时要注意防止bigkey过期时间自动删除问题(例如一个200万的zset设置1小时过期，会触发del操作，造成阻塞，而且该操作会出现在慢查询中(latency可查))</p><ul><li>【建议】 选择适合的数据类型</li></ul><p>例如：实体类型(要合理控制和使用数据结构内存编码优化配置,例如ziplist，但也要注意节省内存和性能之间的平衡)</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>hmset user:1 name tom age 19 favor football</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>set user:1:name tom set user:1:age 19 set user:1:favor football</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_3、控制key的生命周期" tabindex="-1"><a class="header-anchor" href="#_3、控制key的生命周期"><span>3、控制key的生命周期</span></a></h3><p>推荐建议使用expire设置过期时间(条件允许可以打散过期时间，防止集中过期)，不过期的数据重点关注idletime。</p><h2 id="二、命令使用" tabindex="-1"><a class="header-anchor" href="#二、命令使用"><span>二、命令使用</span></a></h2><h3 id="_1、基础命令" tabindex="-1"><a class="header-anchor" href="#_1、基础命令"><span>1、基础命令</span></a></h3><ul><li>【推荐】 O(N)命令关注N的数量</li></ul><p>例如hgetall、lrange、smembers、zrange、sinter等并非不能使用，但是需要明确N的值。有遍历的需求可以使用hscan、sscan、zscan代替。</p><ul><li>【推荐】禁用命令</li></ul><p>禁止线上使用keys、flushall、flushdb等，通过redis的rename机制禁掉命令，或者使用scan的方式渐进式处理。</p><ul><li>【推荐】合理使用select</li></ul><p>redis的多数据库较弱，使用数字进行区分，很多客户端支持较差，同时多业务用多数据库实际还是单线程处理，会有干扰。</p><ul><li>【推荐】使用批量操作提高效率</li></ul><p>原生命令：例如mget、mset。 非原生命令：可以使用pipeline提高效率。</p><p>但要注意控制一次批量操作的元素个数(例如500以内，实际也和元素字节数有关)。</p><p>注意两者不同：</p><p>1、原生是原子操作，pipeline是非原子操作。</p><p>2、pipeline可以打包不同的命令，原生做不到</p><p>3、pipeline需要客户端和服务端同时支持。</p><h3 id="_2、事务功能" tabindex="-1"><a class="header-anchor" href="#_2、事务功能"><span>2、事务功能</span></a></h3><p>【建议】Redis的事务功能较弱(不支持回滚)，而且集群版本(自研和官方)要求一次事务操作的key必须在一个slot上(可以使用hashtag功能解决)。Redis事务功能较弱，不建议过多使用。</p><h3 id="_3、redis集群对lua的特殊要求" tabindex="-1"><a class="header-anchor" href="#_3、redis集群对lua的特殊要求"><span>3、Redis集群对Lua的特殊要求</span></a></h3><ul><li><p>【建议】所有key都应该由 KEYS 数组来传递，redis.call/pcall 里面调用的redis命令，key的位置，必须是KEYS array, 否则直接返回error，&quot;-ERR bad lua script for redis cluster, all the keys that the script uses should be passed using the KEYS array&quot;</p></li><li><p>【建议】所有key，必须在1个slot上，否则直接返回error, &quot;-ERR eval/evalsha command keys must in same slot&quot;</p></li><li><p>【建议】必要情况下使用monitor命令时，要注意不要长时间使用。</p></li></ul><h2 id="三、客户端使用" tabindex="-1"><a class="header-anchor" href="#三、客户端使用"><span>三、客户端使用</span></a></h2><ul><li><p>【推荐】避免多个应用使用一个Redis实例。不相干的业务拆分，公共数据做服务化。</p></li><li><p>【推荐】使用带有连接池的数据库，可以有效控制连接，同时提高效率，标准使用方式：</p></li></ul><p>执行命令如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>Jedis jedis = null;</span></span>
<span class="line"><span>try {</span></span>
<span class="line"><span>    jedis = jedisPool.getResource();</span></span>
<span class="line"><span>    //具体的命令</span></span>
<span class="line"><span>    jedis.executeCommand()</span></span>
<span class="line"><span>} catch (Exception e) {</span></span>
<span class="line"><span>    logger.error(&quot;op key {} error: &quot; + e.getMessage(), key, e);</span></span>
<span class="line"><span>} finally {</span></span>
<span class="line"><span>    //注意这里不是关闭连接，在JedisPool模式下，Jedis会被归还给资源池。</span></span>
<span class="line"><span>    if (jedis != null)</span></span>
<span class="line"><span>        jedis.close();</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>【建议】高并发下建议客户端添加熔断功能(例如netflix hystrix)</p></li><li><p>【推荐】设置合理的密码，如有必要可以使用SSL加密访问（阿里云Redis支持）</p></li><li><p>【建议】根据自身业务类型，选好maxmemory-policy(最大内存淘汰策略)，设置好过期时间。</p></li></ul><p>默认策略是volatile-lru，即超过最大内存后，在过期键中使用lru算法进行key的剔除，保证不过期数据不被删除，但是可能会出现OOM问题。 其他策略如下：</p><p>1、allkeys-lru：根据LRU算法删除键，不管数据有没有设置超时属性，直到腾出足够空间为止。</p><p>2、allkeys-random：随机删除所有键，直到腾出足够空间为止。</p><p>3、volatile-random:随机删除过期键，直到腾出足够空间为止。</p><p>4、volatile-ttl：根据键值对象的ttl属性，删除最近将要过期数据。如果没有，回退到noeviction策略。</p><p>5、noeviction：不会剔除任何数据，拒绝所有写入操作并返回客户端错误信息&quot;(error) OOM command not allowed when used memory&quot;，此时Redis只响应读操作。</p><h2 id="四、相关工具" tabindex="-1"><a class="header-anchor" href="#四、相关工具"><span>四、相关工具</span></a></h2><ul><li>【推荐】数据同步</li></ul><p>redis间数据同步可以使用：redis-port</p><ul><li>【推荐】big key搜索</li></ul><p>redis大key搜索工具</p><ul><li>【推荐】热点key寻找</li></ul><p>facebook的redis-faina或阿里云Redis</p><h2 id="五、删除bigkey实践" tabindex="-1"><a class="header-anchor" href="#五、删除bigkey实践"><span>五、删除bigkey实践</span></a></h2><p>下面操作可以使用pipeline加速，另外redis 4.0已经支持key的异步删除</p><ol><li>Hash删除: hscan + hdel</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>public void delBigHash(String host, int port, String password, String bigHashKey) {</span></span>
<span class="line"><span>    Jedis jedis = new Jedis(host, port);</span></span>
<span class="line"><span>    if (password != null &amp;&amp; !&quot;&quot;.equals(password)) {</span></span>
<span class="line"><span>        jedis.auth(password);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    ScanParams scanParams = new ScanParams().count(100);</span></span>
<span class="line"><span>    String cursor = &quot;0&quot;;</span></span>
<span class="line"><span>    do {</span></span>
<span class="line"><span>        ScanResult&lt;Entry&lt;String, String&gt;&gt; scanResult = jedis.hscan(bigHashKey, cursor, scanParams);</span></span>
<span class="line"><span>        List&lt;Entry&lt;String, String&gt;&gt; entryList = scanResult.getResult();</span></span>
<span class="line"><span>        if (entryList != null &amp;&amp; !entryList.isEmpty()) {</span></span>
<span class="line"><span>            for (Entry&lt;String, String&gt; entry : entryList) {</span></span>
<span class="line"><span>                jedis.hdel(bigHashKey, entry.getKey());</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        cursor = scanResult.getStringCursor();</span></span>
<span class="line"><span>    } while (!&quot;0&quot;.equals(cursor));</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    //删除bigkey</span></span>
<span class="line"><span>    jedis.del(bigHashKey);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>List删除: ltrim</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>public void delBigList(String host, int port, String password, String bigListKey) {</span></span>
<span class="line"><span>    Jedis jedis = new Jedis(host, port);</span></span>
<span class="line"><span>    if (password != null &amp;&amp; !&quot;&quot;.equals(password)) {</span></span>
<span class="line"><span>        jedis.auth(password);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    long llen = jedis.llen(bigListKey);</span></span>
<span class="line"><span>    int counter = 0;</span></span>
<span class="line"><span>    int left = 100;</span></span>
<span class="line"><span>    while (counter &lt; llen) {</span></span>
<span class="line"><span>        //每次从左侧截掉100个</span></span>
<span class="line"><span>        jedis.ltrim(bigListKey, left, llen);</span></span>
<span class="line"><span>        counter += left;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    //最终删除key</span></span>
<span class="line"><span>    jedis.del(bigListKey);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>Set删除: sscan + srem</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>public void delBigSet(String host, int port, String password, String bigSetKey) {</span></span>
<span class="line"><span>    Jedis jedis = new Jedis(host, port);</span></span>
<span class="line"><span>    if (password != null &amp;&amp; !&quot;&quot;.equals(password)) {</span></span>
<span class="line"><span>        jedis.auth(password);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    ScanParams scanParams = new ScanParams().count(100);</span></span>
<span class="line"><span>    String cursor = &quot;0&quot;;</span></span>
<span class="line"><span>    do {</span></span>
<span class="line"><span>        ScanResult&lt;String&gt; scanResult = jedis.sscan(bigSetKey, cursor, scanParams);</span></span>
<span class="line"><span>        List&lt;String&gt; memberList = scanResult.getResult();</span></span>
<span class="line"><span>        if (memberList != null &amp;&amp; !memberList.isEmpty()) {</span></span>
<span class="line"><span>            for (String member : memberList) {</span></span>
<span class="line"><span>                jedis.srem(bigSetKey, member);</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        cursor = scanResult.getStringCursor();</span></span>
<span class="line"><span>    } while (!&quot;0&quot;.equals(cursor));</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    //删除bigkey</span></span>
<span class="line"><span>    jedis.del(bigSetKey);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>SortedSet删除: zscan + zrem</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>public void delBigZset(String host, int port, String password, String bigZsetKey) {</span></span>
<span class="line"><span>    Jedis jedis = new Jedis(host, port);</span></span>
<span class="line"><span>    if (password != null &amp;&amp; !&quot;&quot;.equals(password)) {</span></span>
<span class="line"><span>        jedis.auth(password);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    ScanParams scanParams = new ScanParams().count(100);</span></span>
<span class="line"><span>    String cursor = &quot;0&quot;;</span></span>
<span class="line"><span>    do {</span></span>
<span class="line"><span>        ScanResult&lt;Tuple&gt; scanResult = jedis.zscan(bigZsetKey, cursor, scanParams);</span></span>
<span class="line"><span>        List&lt;Tuple&gt; tupleList = scanResult.getResult();</span></span>
<span class="line"><span>        if (tupleList != null &amp;&amp; !tupleList.isEmpty()) {</span></span>
<span class="line"><span>            for (Tuple tuple : tupleList) {</span></span>
<span class="line"><span>                jedis.zrem(bigZsetKey, tuple.getElement());</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        cursor = scanResult.getStringCursor();</span></span>
<span class="line"><span>    } while (!&quot;0&quot;.equals(cursor));</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    //删除bigkey</span></span>
<span class="line"><span>    jedis.del(bigZsetKey);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,69),p=[l];function d(t,r){return e(),n("div",null,p)}const u=s(i,[["render",d],["__file","redis缓存设计规范.html.vue"]]),o=JSON.parse('{"path":"/skill/redis/redis%E7%BC%93%E5%AD%98%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83.html","title":"redis缓存设计规范","lang":"zh-CN","frontmatter":{"description":"redis缓存设计规范 一、键值设计 1、key名设计 【建议】可读性 以业务名(或数据库名)为前缀(防止key冲突)，用冒号分隔，比如业务名:表名:id的key可以设置成ugc:video:1 【建议】可管理性 相同业务场景使用公共前缀，同时冒号分层有助于客户端快速定位key 【建议】 简洁性 保证语义的前提下，控制key的长度，当key较多时，内存...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/my-docs/skill/redis/redis%E7%BC%93%E5%AD%98%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83.html"}],["meta",{"property":"og:site_name","content":"Java库"}],["meta",{"property":"og:title","content":"redis缓存设计规范"}],["meta",{"property":"og:description","content":"redis缓存设计规范 一、键值设计 1、key名设计 【建议】可读性 以业务名(或数据库名)为前缀(防止key冲突)，用冒号分隔，比如业务名:表名:id的key可以设置成ugc:video:1 【建议】可管理性 相同业务场景使用公共前缀，同时冒号分层有助于客户端快速定位key 【建议】 简洁性 保证语义的前提下，控制key的长度，当key较多时，内存..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-02T09:24:29.000Z"}],["meta",{"property":"article:author","content":"程序员小义"}],["meta",{"property":"article:modified_time","content":"2024-06-02T09:24:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"redis缓存设计规范\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-02T09:24:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"程序员小义\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"一、键值设计","slug":"一、键值设计","link":"#一、键值设计","children":[{"level":3,"title":"1、key名设计","slug":"_1、key名设计","link":"#_1、key名设计","children":[]},{"level":3,"title":"2、value设计","slug":"_2、value设计","link":"#_2、value设计","children":[]},{"level":3,"title":"3、控制key的生命周期","slug":"_3、控制key的生命周期","link":"#_3、控制key的生命周期","children":[]}]},{"level":2,"title":"二、命令使用","slug":"二、命令使用","link":"#二、命令使用","children":[{"level":3,"title":"1、基础命令","slug":"_1、基础命令","link":"#_1、基础命令","children":[]},{"level":3,"title":"2、事务功能","slug":"_2、事务功能","link":"#_2、事务功能","children":[]},{"level":3,"title":"3、Redis集群对Lua的特殊要求","slug":"_3、redis集群对lua的特殊要求","link":"#_3、redis集群对lua的特殊要求","children":[]}]},{"level":2,"title":"三、客户端使用","slug":"三、客户端使用","link":"#三、客户端使用","children":[]},{"level":2,"title":"四、相关工具","slug":"四、相关工具","link":"#四、相关工具","children":[]},{"level":2,"title":"五、删除bigkey实践","slug":"五、删除bigkey实践","link":"#五、删除bigkey实践","children":[]}],"git":{"createdTime":1717320269000,"updatedTime":1717320269000,"contributors":[{"name":"whuhbz","email":"463436681@qq.com","commits":1}]},"readingTime":{"minutes":5.64,"words":1692},"filePathRelative":"skill/redis/redis缓存设计规范.md","localizedDate":"2024年6月2日","excerpt":"\\n<h2>一、键值设计</h2>\\n<h3>1、key名设计</h3>\\n<ul>\\n<li>【建议】可读性</li>\\n</ul>\\n<p>以业务名(或数据库名)为前缀(防止key冲突)，用冒号分隔，比如业务名:表名:id的key可以设置成ugc:video:1</p>\\n<ul>\\n<li>【建议】可管理性</li>\\n</ul>\\n<p>相同业务场景使用公共前缀，同时冒号分层有助于客户端快速定位key</p>\\n<ul>\\n<li>【建议】 简洁性</li>\\n</ul>\\n<p>保证语义的前提下，控制key的长度，当key较多时，内存占用也不容忽视，</p>\\n<p>例如： user:{uid}:friends:messages:{mid}简化为u:{uid}:friⓂ️{mid}。</p>","autoDesc":true}');export{u as comp,o as data};
